Title: Events

The events endpoint is used to manage events within a calendar.

Each event has a `title` and `description` as well as a list of participants and a (when)[#when] object that indicates the time and length of the event.

# Retrieving a specific event's metadata

```
:::xml
GET https://api.inboxapp.com/n/<namespace_id>/events/<event_id>
```

**Response:**

```
:::json
{
    "object": "event",
    "id": "4ee4xbnx7pxdb9g7c2f8ncyto",
    "calendar_id": "ci0k1wfyv533ccgox4t7uri4h",
    "namespace_id": "14e5bn96uizyuhidhcw5rfrb0",
    "description": null,
    "location": null,
    "participants": [
        {
            "email": "example@gmail.com",
            "name": "Ben Bitdiddle",
            "status": "yes"
        }
    ],
    "read_only": false,
    "title": "Meeting with Ben Bitdiddle",
    "when": {
        "object": "timespan",
        "end_time": 1408123800,
        "start_time": 1408120200
    }
}
```

# Retrieving many events

This endpoint supports [filters](#filters), which allow you to fetch multiple events matching specific critera. For example, the following will limit the number of results to 3.

**Options:**

* **`limit`** (Integer) Maximum number of results to return. Defaults to 100. If `limit` is set too high, a request may fail with HTTP status code 400 to prevent excessively large response bodies.
* **`offset`** (Integer) Zero-based offset to be used with `limit` for pagination of results.
* **`event_id`** Return the event with the given id.
* **`calendar_id`** Return events from the calendar with the given id.
* **`title`** (String) Return events whose title matches the provided value.
* **`description`** (String) Return events whose description matches the provided value.
* **`location`** (String) Return events whose location matches the provided value.
* **`starts_before`** (integer, Unix timestamp) Return events that start before this timestamp.
* **`starts_after`** (integer, Unix timestamp) Return events that start after this timestamp.
* **`ends_before`** (integer, Unix timestamp) Return events that end before this timestamp.
* **`ends_after`** (integer, Unix timestamp) Return events that end after this timestamp.


```
:::xml
GET https://api.inboxapp.com/n/<namespace_id>/events?limit=3
```

# Adding a new event

New events can easily be created with the following API. They are automatically synced back to the provider (e.g., Google Calendar, Microsoft Exchange).

Note that timestamps are expected to be in UTC timezone.

```
:::xml
POST https://api.inboxapp.com/n/<namespace_id>/events
```

**Sample post body**

```
:::json
{
    "title":"Friday meeting",
    "when" : {
        "start_time": 1407542195,
        "end_time": 1407543195
    },
    "location": "Inbox HQ",
    "calendar_id": "ci0k1wfyv533ccgox4t7uri4h",
    "participants": [
        {
            "email": "example@gmail.com",
            "name": "Ben Bitdiddle"
        }
    ]
}
```

Note that if the `calendar_id` parameter is not provided, then the event will be added to the default calendar.

# Adding a new event with an .ics file

It is also possible to create new events by uploading a .ics file. To do so, post the file data to the event creation endpoint with the `content-type` header set to `text/calendar`.


# Updating / Deleting an existing event

Updating and deleting an event is managed in a similar fashion to other endpoints with the restriction that `read_only` events cannot be updated and events cannot be updated or deleted from a `read_only` calendar.

```
:::xml
PUT https://api.inboxapp.com/n/<namespace_id>/events/<event_id>
```

**Sample post body**

```
:::json
{
    "location": "Atlas Cafe (updated)",
    "calendar_id": "ci0k1wfyv533ccgox4t7uri4h",
    "participants": [
        {
            "email": "example@gmail.com",
            "name": "Ben Bitdiddle"
        },
        {
            "email": "example2@gmail.com",
            "name": "Alyssa P. Hacker"
        },

    ]
}
```

In the above example, the location of the event is updated and an additional participant is added.

# Managing Participants

The participants field is a list of items that contain an `name`, `email`, and `status`. The participants can be managed explicitly through the event update protocol. Another way for participants to be managed is via a GET to the event endpoint. This mechanism allows links to be provided (e.g. in an email) that allows participants to choose whether they are attending the event or not.

This can be performed via the following:

```
:::xml
GET https://api.inboxapp.com/n/<namespace_id>/events/<event_id>?action=rsvp&rvsp=<rsvp_response>
```

The `rsvp_response` paramter can be one of the following:
* **`yes`** If the participant is attending
* **`no`** If the participant is not attending
* **`maybe`** If the participant is unsure
* **`noreply`** (Default) When the participant hasn't responded yet.

# When

The `when` field on an event can take on one of four forms (described below). Each of these sub-objects contains fields that are either times represented as a unix timestamp in the UTC timezone or dates represented in ISO 8601 format (YYYY-MM-DD).

* **`time`** For a given moment in time which has a `time` field.
* **`timespan`** For a span of time which has a `start_time` and `end_time` field.
* **`date`** For an event on a single day (e.g. a Birthday) which has a `date` field.
* **`datespan`** For an event spanning multiple days which has a `start_date` and `end_date` field.

For example:

American Declaration of Independence:
```
:::json
{
    "object": "date",
    "start_date": "1776-07-04"
}
```


Alan Turing's lifespan would be represented with the following object:
```
:::json
{
    "object": "datespan",
    "start_date": "1912-06-23",
    "end_date": "1954-06-07"
}
```

The 2014 San Francisco earthquake:
```
:::json
{
    "object": "time",
    "time": 1408875644
}
```

The last InboxHQ Monday meeting:
```
:::json
{
    "object": "time",
    "start_time": 1409594400,
    "end_time": 1409598000
}
```

